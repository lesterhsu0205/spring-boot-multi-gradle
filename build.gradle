buildscript {
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply from: "connectDB.gradle"
    apply from: "prop.gradle"
    apply from: "utils.gradle"

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.spring_boot}"
    }
}

idea {
    project {
        jdkName = JavaVersion.VERSION_1_8
        languageLevel = JavaVersion.VERSION_1_8
        vcs = "Git"
    }
}

allprojects {
    //apply plugin: 'license'
    apply plugin: "java"

    group = "${versions.project_group}"
    version = "${versions.project_ver}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = "${versions.project_encoding}"

    repositories {
        mavenCentral()
    }
}

subprojects { subproj ->

    apply plugin: "org.springframework.boot"

    jar {
        excludes = ['**/rebel.xml', '**/.keep']
        doFirst {
            // 生成 jar 包的時候按此規則生成 manifest 文件
            manifest = defineManifest([
                    project      : subproj,
                    projectVendor: "${versions.project_vendor}"
            ])
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            manifest = defineManifest([
                    project      : subproj,
                    projectVendor: "${versions.project_vendor}"
            ])
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            manifest = defineManifest([
                    project      : subproj,
                    projectVendor: "${versions.project_vendor}"
            ])
        }
    }

    artifacts {
        archives jar
//        archives javadocJar
        archives sourcesJar
    }

    configurations {
        // 所有需要忽略的包定義在這
//		all*.exclude group: 'commons-httpclient'
    }

    dependencies {

        compile "org.springframework.boot:spring-boot-starter-web"

        // 共用測試依賴
        testCompile('org.springframework.boot:spring-boot-starter-test')

        // 各自 project 若有 local jar 另外載入
        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')
        compile jarTree
    }
}